/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mainPackage.Pannels.Ledger;

import com.mainPackage.MainProgram;
import dao.staffledgerDao;
import java.awt.print.PrinterJob;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.MessageFormat;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;

import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.DateFilterModel;
import model.stafLedgerModel;

/**
 *
 * @author Bladestorm
 */
public class staffLedgerDetails extends javax.swing.JPanel {

    /**
     * Creates new form PurchaseLedgerDetails
     */
    Date date = new Date();
    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
    String sdate;
    Date ndate;

    staffledgerDao stDao = new staffledgerDao();

    DateFilterModel dateftmod = new DateFilterModel();

    public staffLedgerDetails(String pstaffname) {
        initComponents();
        lblStaffName.setText(pstaffname);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        List<stafLedgerModel> ledgerlist = stDao.getAllStaffLedger(pstaffname);
        Iterator<stafLedgerModel> iter = ledgerlist.iterator();
        BigDecimal balance = new BigDecimal(0);
        BigDecimal damount = new BigDecimal(0);
        BigDecimal camount = new BigDecimal(0);
        BigDecimal zero = new BigDecimal(0);
        String sbalance = null;
        while (iter.hasNext()) {
            stafLedgerModel list = iter.next();
            String par = list.getParticular();

            damount = damount.add(list.getDebit());
            camount = camount.add(list.getCredit());
            balance = damount.subtract(camount);
            int result = balance.compareTo(zero);
            if (result == 1) {
                sbalance = balance.toString() + "  DR";
            } else {
                sbalance = balance.abs().toString() + "  CR";

            }
//             if(par.equalsIgnoreCase("deposit") || par.equalsIgnoreCase("Item Payment")){
//                 model.addRow(new Object[]{list.getDate(),list.getParticular(),"",list.getCredit(),sbalance});
//             }else{
//                 model.addRow(new Object[]{list.getDate(),list.getParticular(),list.getDebit(),"",sbalance});
//             }
            model.addRow(new Object[]{list.getDate(), list.getParticular(), list.getDebit(), list.getCredit(), sbalance});

        }
        model.addRow(new Object[]{"", "", "", "", ""});
        model.addRow(new Object[]{"", "Total", damount, camount, sbalance});

    }

    public Date getFromDate() {
        sdate = txtFromdate.getText();
        try {
            ndate = dateFormat.parse(sdate);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter Date in the Format YYYY/MM/DD");
        }
        return ndate;
    }

    public Date getToDate() {
        sdate = txtTodate.getText();
        try {
            ndate = dateFormat.parse(sdate);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter Date in the Format YYYY/MM/DD");
        }
        return ndate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupReceipt = new javax.swing.ButtonGroup();
        lblStaffName = new javax.swing.JLabel();
        lblPrint = new javax.swing.JLabel();
        lblDate1 = new javax.swing.JLabel();
        txtFromdate = new javax.swing.JTextField();
        lblDate2 = new javax.swing.JLabel();
        txtTodate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnBack = new javax.swing.JLabel();
        lblPayment = new javax.swing.JLabel();
        btnViewDetails = new javax.swing.JButton();

        lblStaffName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblStaffName.setText("asdf");

        lblPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        lblPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPrintMouseClicked(evt);
            }
        });

        lblDate1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDate1.setText("From");

        txtFromdate.setText("2017/01/01");

        lblDate2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDate2.setText("To");

        txtTodate.setText("2017/12/30");
        txtTodate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTodateActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "    Date", "    Particular", "    Debit", "    Credit", "   Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(25);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setPreferredWidth(50);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(1).setPreferredWidth(150);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/goback.png"))); // NOI18N
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });

        lblPayment.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnViewDetails.setText("View");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(324, 324, 324)
                .addComponent(lblStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(321, 395, Short.MAX_VALUE)
                .addComponent(lblPrint)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lblPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(132, 132, 132)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtFromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(lblDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTodate, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(btnViewDetails)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(lblStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(lblPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtFromdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTodate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnViewDetails))
                            .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(179, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        // TODO add your handling code here:
        MainProgram.mainframe.mainPane.remove(this);
        MainProgram.mainframe.mainPane.add(new StaffLedger());
        SwingUtilities.updateComponentTreeUI(MainProgram.mainframe.mainPane);

    }//GEN-LAST:event_btnBackMouseClicked

    private void lblPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrintMouseClicked
        // TODO add your handling code here:
        String name = lblStaffName.getText();

        try {
            PrinterJob job = PrinterJob.getPrinterJob();

            MessageFormat[] header = new MessageFormat[2];

            header[0] = new MessageFormat("line 1");
            header[1] = new MessageFormat("                                                          " + name);

            MessageFormat[] footer = new MessageFormat[2];
            footer[0] = new MessageFormat("");
            footer[1] = new MessageFormat("-{1}-");
            job.setPrintable(new MyTablePrintable(table, JTable.PrintMode.FIT_WIDTH, header, footer));
            job.printDialog();
            job.print();

        } catch (Exception ex) {
        }

    }//GEN-LAST:event_lblPrintMouseClicked

    private void txtTodateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTodateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTodateActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        String scompanyname = lblStaffName.getText();
        String sFromDate = txtFromdate.getText();
        String sToDate = txtTodate.getText();
        if (sFromDate.isEmpty()) {
            JOptionPane.showMessageDialog(null, "From Date is Empty !!");
        } else if (!sFromDate.matches("\\d{4}/\\d{1,2}/\\d{1,2}")) {
            JOptionPane.showMessageDialog(null, "Date not valid date should be YYYY/MM/DD");
        } else if (!sFromDate.matches("[0-9/_]+")) {
            JOptionPane.showMessageDialog(null, "From Date not Valid !!");
        } else if (sToDate.isEmpty()) {
            JOptionPane.showMessageDialog(null, "To Date is Empty !!");
        } else if (!sToDate.matches("\\d{4}/\\d{1,2}/\\d{1,2}")) {
            JOptionPane.showMessageDialog(null, "Date not valid date should be YYYY/MM/DD");
        } else if (!sToDate.matches("[0-9/_]+")) {
            JOptionPane.showMessageDialog(null, "To Date not Valid !!");
        } else {
            if (JOptionPane.showConfirmDialog(null, "Are you sure want to view !! " + "\n From :- " + sFromDate + "\n To " + sToDate, "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);

                BigDecimal initial = stDao.getOpenBalance(scompanyname, getFromDate());
                BigDecimal ze = new BigDecimal(0);
                int r = initial.compareTo(ze);

                if (r == 1) {
                    model.addRow(new Object[]{sFromDate, "Opening Balance", initial, "", initial + "  DR"});
                } else {
                    model.addRow(new Object[]{sFromDate, "Capital", "", initial.abs(), initial.abs() + " CR"});
                }

                dateftmod.setFromDate(getFromDate());
                dateftmod.setToDate(getToDate());
                dateftmod.setName(scompanyname);
                stDao.getFilterbyDate(dateftmod);

                List<stafLedgerModel> staffledger = stDao.getFilterbyDate(dateftmod);
                Iterator<stafLedgerModel> iterator = staffledger.iterator();
                BigDecimal zero = new BigDecimal(0);

                String sbalance = null;
                while (iterator.hasNext()) {
                    stafLedgerModel list = iterator.next();
//                  
                    initial = initial.add(list.getDebit().subtract(list.getCredit()));

                    int result = initial.compareTo(zero);
                    if (result == 1) {
                        sbalance = initial.toString() + "  DR";
                    } else {
                        sbalance = initial.abs().toString() + "  CR";

                    }
                   model.addRow(new Object[]{list.getDate(), list.getParticular(), list.getDebit(), list.getCredit(), sbalance});
                }
                

            } else {
                JOptionPane.showMessageDialog(null, "cancelled");
            }

        }


    }//GEN-LAST:event_btnViewDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnBack;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.ButtonGroup buttonGroupReceipt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblPayment;
    public javax.swing.JLabel lblPrint;
    private javax.swing.JLabel lblStaffName;
    public javax.swing.JTable table;
    private javax.swing.JTextField txtFromdate;
    private javax.swing.JTextField txtTodate;
    // End of variables declaration//GEN-END:variables
}
